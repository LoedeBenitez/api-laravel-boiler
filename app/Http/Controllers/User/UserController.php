<?php

namespace App\Http\Controllers\User;

use App\Http\Controllers\Controller;
use App\Models\CredentialModel;
use App\Models\UserModel;
use App\Traits\MailTrait;
use App\Traits\ResponseTrait;
use Illuminate\Http\Request;
use Exception;
use DB;
class UserController extends Controller
{
    use ResponseTrait, MailTrait;
    public function onCreate(Request $request)
    {
        $fields = $request->validate([
            'email' => 'required|unique:users,email',
            'employee_id' => 'required|unique:users,employee_id',
            'prefix' => 'nullable|string',
            'suffix' => 'nullable|string',
            'first_name' => 'required|string',
            'middle_name' => 'nullable|string',
            'last_name' => 'required|string',
            'user_access' => 'nullable',
            'position' => 'nullable'
        ]);
        try {
            DB::beginTransaction();
            $userModel = new UserModel();
            $userModel->fill($fields);

            // Create Credential and Send Email
            $credentialModel = new CredentialModel();
            // $autoGeneratedPassword = Str::random(6);
            $credentialModel->email = $fields['email'];
            $credentialModel->password = 'password'; //$autoGeneratedPassword;
            $credentialModel->save();

            $userModel->credential_id = $credentialModel->id;
            $userModel->save();

            // Email Send Here Save Signed Route

            $temporaryUrl = $this->onCreateSignedUrl($credentialModel, 'create', '/password/create');
            $firstLastName = $fields['first_name'] . ' ' . $fields['last_name'];
            $this->onSendSignedUrl($fields['email'], 'create', $firstLastName, $temporaryUrl);
            DB::commit();
            return $this->dataResponse('success', 201, __('msg.create_success'));

        } catch (Exception $exception) {
            DB::rollBack();
            return $this->dataResponse('error', 400, $exception->getMessage());
        }
    }

    public function onCreateSignedUrl($credentialQuery, $type, $route)
    {
        try {
            if (!$credentialQuery) {
                return $this->dataResponse('error', 404, __('msg.signed_url_invalid'));
            }
            $baseURL = env('BASE_URL');
            $token = $type . '|' . bin2hex(random_bytes(16));
            $temporaryUrl = $baseURL . $route . '/' . $token;
            $credentialQuery->signed_route = $token;
            $credentialQuery->save();
            return $temporaryUrl;
        } catch (Exception $exception) {
            return $this->dataResponse('error', 400, $exception->getMessage());
        }
    }
}
